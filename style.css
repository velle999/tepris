/* Updated CSS for fully responsive and mobile-friendly Tepris layout */

/* === Global Defaults === */
html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  width: 100%;
  background: linear-gradient(135deg, #1a1a1a, #000000);
  font-family: 'Courier New', monospace;
  color: #eee;
  overflow: hidden;
  touch-action: none;
  overscroll-behavior: none;
  position: fixed;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

/* === Arcade Shell === */
#arcade-shell {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  width: 100%;
  position: relative;
}

/* === Insert Coin Button === */
#tetris-toggle {
  font-family: 'Courier New', monospace;
  font-size: 2.5rem;
  padding: 24px 48px;
  touch-action: manipulation;
  background: #00ffff;
  color: #000;
  border: none;
  border-radius: 12px;
  cursor: pointer;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 5000;
  box-shadow: 0 0 12px #0ff;
  transition: all 0.3s ease;
}

#tetris-toggle:hover {
  background: #0ff;
  box-shadow: 0 0 16px #0ff;
}

/* === Game Wrapper === */
#tetris-wrapper {
  display: none;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  background: #111;
  width: 100%;
  height: 100%;
  padding: 10px;
  box-sizing: border-box;
  overflow: hidden;
}

/* === Layout === */
#game-area {
  display: flex;
  gap: 12px;
  flex-wrap: wrap;
  justify-content: center;
  align-items: flex-start;
  width: 100%;
  flex: 1;
  max-height: 100vh;
  overflow: hidden;
  box-sizing: border-box;
  padding: 0;
}

/* === Canvas & Container === */
#tetris-container {
  width: 100%;
  max-width: 90vw;
  max-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  box-sizing: border-box;
  padding: 0;
}

#tetris {
  width: 100%;
  height: auto;
  aspect-ratio: 10 / 20;
  max-height: 65vh;
  max-width: 100%;
  background: rgba(0, 0, 0, 0.85);
  border: 2px solid #0ff;
  image-rendering: pixelated;
  display: block;
  margin: 0 auto;
}

/* === Preview Box === */
#preview-box {
  width: 16vw;
  height: 16vw;
  max-width: 90px;
  max-height: 90px;
  aspect-ratio: 1 / 1;
  border: 2px dashed #0ff;
  margin-bottom: 6px;
  background: rgba(0, 0, 0, 0.5);
  image-rendering: pixelated;
}

/* === Scoreboard === */
#scoreboard {
  margin-top: 6px;
  font-size: 1rem;
  text-align: center;
  color: #00ffcc;
  background: rgba(0, 0, 0, 0.6);
  padding: 4px 6px;
  border: 1px solid #00ffcc;
  border-radius: 6px;
  text-shadow: 1px 1px 2px black;
  width: 100%;
  max-width: 300px;
}


/* === Touch Controls === */
#touch-controls {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin-top: 10px;
  gap: 10px;
  width: 100%;
  max-width: 360px;
}

#touch-controls button {
  flex: 1 1 40%;
  font-size: 2rem;
  padding: 14px;
  border: none;
  border-radius: 6px;
  background: #222;
  color: #fff;
  cursor: pointer;
}

#touch-controls button:hover {
  background: #00ffff;
  color: #000;
}

/* === High Scores === */
#highscores {
  margin-top: 10px;
  max-width: 400px;
  width: 100%;
}

#highscore-table {
  margin-top: 6px;
  color: #0ff;
  background: #000;
  border-collapse: collapse;
  width: 100%;
}

#highscore-table td,
#highscore-table th {
  padding: 4px 8px;
  border: 1px solid #0ff;
  text-align: center;
}

/* === Overlay === */
#ready-overlay {
  font-size: 4rem;
  pointer-events: none;
  z-index: 10000;
}

#crt-flash {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background: white;
  opacity: 0;
  z-index: 9999;
  pointer-events: none;
}

@keyframes crt-flash {
  0%   { opacity: 1; }
  30%  { opacity: 0.4; }
  60%  { opacity: 0.9; }
  100% { opacity: 0; }
}

@keyframes flashPulse {
  0% { filter: brightness(1.5) saturate(1.5); }
  50% { filter: brightness(2) saturate(2); }
  100% { filter: brightness(1.5) saturate(1.5); }
}

.tetris-flash {
  animation: flashPulse 0.5s ease-in-out;
}

/* === Responsive Tweaks === */
@media (max-width: 600px) {
  #tetris-container {
    max-width: 95vw;
    max-height: 100vh;
  }

  #tetris {
    max-height: 60vh;
  }

  #preview-box {
    width: 22vw;
    height: 22vw;
    max-width: 75px;
    max-height: 75px;
    margin-bottom: 4px;
  }

  #scoreboard {
    font-size: 0.9rem;
    padding: 3px 4px;
    max-width: 240px;
  }

  #game-area {
    gap: 8px;
  }
} 

// === Add this to your CSS ===
/* Retro Tetris Style */
body {
  background: radial-gradient(circle at center, #111 0%, #000 100%);
  font-family: 'Press Start 2P', monospace;
  color: #0f0;
  text-shadow: 0 0 3px #0f0;
}

canvas {
  image-rendering: pixelated;
  box-shadow: 0 0 10px #0f0, 0 0 40px #0ff;
  border: 4px double #0ff;
  background-color: #000;
}

#tetris-container {
  border: 4px ridge #0ff;
  padding: 8px;
  background: repeating-linear-gradient(
    0deg,
    #000,
    #000 2px,
    #111 2px,
    #111 4px
  );
  box-shadow: 0 0 20px #0ff inset;
}

#score, #level, #lines, #highScore {
  font-size: 12px;
  color: #0f0;
  text-shadow: 0 0 2px #0f0;
}

.tetris-flash {
  animation: screenFlash 0.2s ease-in-out alternate 2;
}

@keyframes screenFlash {
  from { background-color: #fff; }
  to { background-color: #000; }
}

// === Add to JS where needed ===
function drawCRTOverlay(ctx) {
  const { width, height } = ctx.canvas;
  ctx.save();
  ctx.globalAlpha = 0.05;
  ctx.fillStyle = '#0f0';
  for (let y = 0; y < height; y += 2) {
    ctx.fillRect(0, y, width, 1);
  }
  ctx.restore();
}

@keyframes blink {
  0%, 100% { opacity: 1; }
  50% { opacity: 0; }
}

#insert-coin {
  animation: blink 1s infinite;
}

// Inside your draw() function, after everything else is drawn:
drawCRTOverlay(context);

// Load retro font (include in HTML):
// <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">

// Optional: add CRT audio static at game start for effect
function playCRTStartupNoise() {
  const osc = new AudioContext();
  const n = osc.createBuffer(1, 44100, 44100);
  const d = n.getChannelData(0);
  for (let i = 0; i < d.length; i++) d[i] = (Math.random() * 2 - 1) * 0.1;
  const src = osc.createBufferSource();
  src.buffer = n;
  src.connect(osc.destination);
  src.start();
  setTimeout(() => osc.close(), 500);
}

// Call playCRTStartupNoise() during DOMContentLoaded or tetris-toggle click
// to give it that "TV turned on" sizzle
